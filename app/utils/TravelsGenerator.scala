package utils

import java.io._
import java.time.LocalDateTime

import scala.util.{Failure, Random, Success, Try}

/**
  * Utility class to generate example dataset for town-visit tool. City names are generated by randomly selected
  * characters [A-Z]. Distance between cities is givenfrom distance between each character in the set.
  *
  * There will be 24 visit in each day. Visits are uniformly distributed.
  *
  * Usage:
  *   In command line write
  *   runMain utils.TravelsGenerator <file name> <file size> <name size>
  *
  * Example:
  *   Following command will create new files in repository root containing 1000 travels, each city name will
  *   have 2 characters.
  *   sbt "runMain utils.TravelsGenerator generated-travels.tsv 1000 2"
  *
  */
object TravelsGenerator {

  val rnd = new Random

  def main(args: Array[String]): Unit = {
    if (args.length < 3) {
      println("Usage: utils.TravelsGenerator <file name> <file size> <name size>")
      return
    }

    val Array(fileName, rowsStr, charactersStr) = args

    val t = for {
      rows <- Try(rowsStr.toInt)
      characters <- Try(charactersStr.toInt)
      ret <- generate(fileName, rows, characters)
    } yield ret

    t match {
      case Success(_) => println("Done")
      case Failure(e) => println(s"Error in generating: ${e.getMessage}")
    }
  }

  def nextAlphaNum: Char = {
    val chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    chars charAt (rnd nextInt chars.length)
  }

  def generate(fileName: String, rows: Int, characters: Int): Try[Int] = {

    var writer: Option[PrintWriter] = None
    val t = Try {
      val pw = new PrintWriter(new File(fileName))
      writer = Some(pw)

      var prevCity: Option[Int] = None
      pw.write("Date\tCity\tKilometers\n")

      for (i <- 1 to rows) {
        val chars = for (_ <- 1 to characters) yield nextAlphaNum
        val city = new String(chars.toArray)
        val date = LocalDateTime.now().plusHours(i.toLong).toLocalDate

        val cityValue = chars.map(_.toInt).sum
        val kilometers = prevCity.fold(0)(prev => Math.abs(prev - cityValue))
        prevCity = Some(cityValue)

        pw.write(s"$date\t$city\t$kilometers\n")
      }

      rows
    }

    writer.foreach(_.close())

    t
  }
}
